#!/bin/bash

# Author: Nicolas Igor Tapia Rivas
# June, 2019

# Usage:
# ./multipy -e envname -s name1 name2 ... namek -g gpu1 gpu2 ... gpuk
#
# Example with gpu setting:
# ./multipy -e tf -s script0.py script1.py script2.py script3.py -g 0 1 2 3
#
# Example without gpu setting:
# ./multipy -e tf -s script0.py script1.py script2.py script3.py

# Helpers
exit_if_not_value () {
	if [ "$1" = "" -o "${1:0:1}" = "-" ]; then
		echo "Error: Program was invoked incorrectly."
		exit 1
	fi
}

# Help output
function myHelp () {
cat <<-END
Program to run multiple python scripts on different screen sessions.

Usage:
multipy -e envname -s name1 name2 ... namek -g gpu1 gpu2 ... gpuk

Arguments (in no particular order):
    -e | --env      Name of conda environment. Default is 'base'.
    -s | --scripts  Python scripts to be run, separated by spaces, as
                    script_file1.py script_file2.py ... script_filek.py
    -g | --gpus     IDs of the cuda gpus to be used for each specified 
                    script, separated by spaces. It must be a one-to-one 
                    mapping with the list of scripts provided. Default 
                    is -1 (all gpus).
    -h | --help     This description.
END
}

# Initialization
env_name="base"
declare -a script_names
declare -a gpu_ids

# Parsing arguments
while [ "$1" != "" ]; do
	case $1 in
		-e | --env )
            next_arg=$2
            exit_if_not_value $next_arg
            shift
        	env_name=$1
            ;;
        -s | --scripts )
            next_arg=$2
            exit_if_not_value $next_arg
            while [ "${next_arg:0:1}" != "-" -a "$next_arg" != "" ]; do
            	script_names+=($next_arg)
            	shift
                next_arg=$2
            done
            ;;
        -g | --gpus )
            next_arg=$2
            exit_if_not_value $next_arg
            while [ "${next_arg:0:1}" != "-" -a "$next_arg" != "" ]; do
            	gpu_ids+=($next_arg)
            	shift
                next_arg=$2
            done
            ;;
        -h | --help )
            myHelp
            exit 1
            ;;
        * )
			echo "Incorrect argument: ${1}."
            exit 1
            ;;
    esac
    shift
done

# Validity checks and default value for gpu_ids
n_scripts=${#script_names[@]}
n_gpus=${#gpu_ids[@]}
if [ $n_scripts = 0 ]; then
	echo "Error: No scripts were given"
	exit 1
elif [ $n_gpus = 0 ]; then
	for ((i=0;i<$n_scripts;i++)); do
	    gpu_ids+=("-1")
	done
elif [ $n_scripts != $n_gpus ]; then
	echo "Error: List of gpus specified does not map to list of scripts."
	exit 1
fi

# Now call each script
echo "Machine: ${HOSTNAME}"
echo "Using conda environment ${env_name}"
for ((i=0;i<$n_scripts;i++)); do
    this_script=${script_names[i]}
    this_gpu=${gpu_ids[i]}
    random_number=[${RANDOM}+1000]
    screen_name="run_${i}_${RANDOM:0:3}"
    display_str="Executing ${this_script} on GPU ${this_gpu} inside screen ${screen_name}"
    echo $display_str
    screen -dmS ${screen_name} bash -c " echo ${display_str}; source activate ${env_name} ; CUDA_VISIBLE_DEVICES=${this_gpu} python ${this_script} ; exec $SHELL "
done

